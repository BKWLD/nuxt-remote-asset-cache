'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setOptions = exports.options = exports.foundAssets = undefined;

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// New assets that will be downloaded
// Generated by CoffeeScript 2.4.1
/*
This file is used to pass data between the module, plugin and the main logic.
It was an approach I arrived at, in part, to work around the restriction on
passing non-scalar values from module to plugin in Nuxt. 
*/
var foundAssets = exports.foundAssets = [];

// Configuration options options
var options = exports.options = {};

var setOptions = exports.setOptions = function setOptions(nuxtOptions) {
  var moduleOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  // Make options with defaults
  exports.options = options = (0, _assign2.default)({
    cacheDir: null,
    assetRegex: [],
    concurrency: 6,
    namespaceDirname: 'remote-assets',
    publicDir: nuxtOptions.generate.dir
  }, nuxtOptions.remoteAssetCache, moduleOptions);

  // Add the package's namespaced dir to the cache dir
  if (options.cacheDir) {
    options.cacheDir = _path2.default.join(options.cacheDir, options.namespaceDirname);
  }

  // Return the options
  return options;
};