// Generated by CoffeeScript 2.4.1
// Deps
var cacheDir, concurrency, downloadAssetToCacheDir, downloadNewAssetsToCacheDir, getDestFromUrl, pattern, replacement;
import logger from './logger';
import { remoteUrls } from './store';
import parallelLimit from 'async/parallelLimit';
import path from 'path';
import axios from 'axios';
import fs from 'fs';
import mkdirp from 'mkdirp'; // Settings

concurrency = 6;
cacheDir = path.join(__dirname, 'test');
pattern = /https?:\/\/craft\.infotechinc\.com\/images\/([\w\d-.]+)/i;
replacement = '/images/$1';
export default async function () {
  /*
  Download the remote assets
  */
  return await downloadNewAssetsToCacheDir();
}
; // Download URLs to the cache directory

downloadNewAssetsToCacheDir = async function () {
  var tasks;
  logger.info(`Downloading ${remoteUrls.length} assets (if new) to cache, ${concurrency} at a time`);
  logger.info(`Cache directory: ${cacheDir}`);
  tasks = remoteUrls.map(downloadAssetToCacheDir);
  await parallelLimit(tasks, concurrency);
  return logger.success('Downloading to cache complete');
}; // Download an asset to the cache directory


downloadAssetToCacheDir = function (url) {
  return async function () {
    // parallelLimit needs a function
    var dest, response;
    dest = getDestFromUrl(url);

    if (fs.existsSync(dest)) {
      return;
    }

    mkdirp.sync(path.dirname(dest)); // Make the directory path

    response = await axios(url, {
      responseType: 'stream'
    });
    return response.data.pipe(fs.createWriteStream(dest));
  };
}; // Return the absolute path where the asset will be downloaded to


getDestFromUrl = function (url) {
  var dest, filename, nonGlobalPattern, publicPath;
  nonGlobalPattern = RegExp(pattern.source, pattern.flags.replace('g', ''));
  [url, filename] = url.match(nonGlobalPattern);
  publicPath = replacement.replace('$1', filename);
  return dest = path.join(cacheDir, publicPath);
};